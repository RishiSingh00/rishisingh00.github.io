{
  "cpp": [
    {
      "que":"/*This code is about a program to find the second largest element in an array in c++ ?\nDebug the error if any required so that program functions correctly.\nCode :- */\n\n#include <iostream>\nusing namespace std;\n\n\nint main() {\n    int n;\n    cout << \"Enter the size of the array: \";\n    cin >> n;\n   \n    int arr[n];\n    cout << \"Enter the elements of the array: \";\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n   \n    int largest = arr[0], second_largest = arr[0];\n    for (int i = 1; ; i++) {\n        if (arr[i] > largest) {\n            largest=second_largest;\n            second_largest = arr[i];\n        }\n        else if (arr[i] > largest || arr[i] != second_largest) {\n            second_largest = arr[i];\n        }\n    }\n   \n    if (second_largest == arr[0]) {\n        cout << \"There is no second largest element.\" << endl;\n    }\n    else {\n        cout << \"The second largest element is: \" << second_largest << endl;\n    }\n   \n    return 0;\n}\n",
      "ans": "",
      "hint":""
    },
    {
      "que":"/*This is the implementation of exponential search algorithm in c++,\n* and how does it work to search for an element in an unbounded array\n* Debug if required....\n*/\n\n// Changes from here\n\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint binarySearch(int arr[], int left, int right, int key) {\n    while (left < right) {\n        int mid = left + (right + left) / 2;\n        if (arr[mid] == key) {\n            return mid;\n        } else if (arr[mid] < key) {\n            left = mid + 1;\n        } else {\n            right = mid + 1;\n        }\n    }\n    return -1;\n}\n\nint exponentialSearch(int arr[], int n, int key) {\n    if (arr[0] == key) {\n        return 0;\n    }\n    int i = 1;\n    while (i < n && arr[i] <= key) {\n        i = i * 2;\n    }\n    return binarySearch(arr, i / 2, max(i, n - 1), key);\n}\n\n\n// No Changes beyond here.\n\nint main() {\n    int arr[] = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int key = 16;\n    int index = exponentialSearch(arr, n, key);\n    if (index != -1) {\n        cout << \"Element found at index \" << index << endl;\n    } else {\n        cout << \"Element not found\" << endl;\n    }\n    return 0;\n}",
      "ans": "",
      "hint":""
    },
    {
      "que": "Debug the following C++ program that implements an Employee class with various member functions to modify and retrieve information about the employee, and gives a 10% raise to an employee object named \"John Smith\" with an initial salary of $50,000?\nOutput should be : -\nName: John Smith\nAge: 30\nSalary: $50000\nSalary increased by $5000\nName: John Smith\nAge: 30\nSalary: $55000\n\n\n#include <iostream>\n#include <string>\n\n\nusing namespace std;\n\n\nclass Employee {\nprivate:\n    str name;\n    int age;\n    double salary;\npublic:\n    // Constructor\n    Employee(string n, int a, double  {\n        name = n;\n        age = a\n        salary = s;\n    }\n\n\n    // Setter methods\n    void setName(string n) {\n        name = n;\n    }\n\n\n    void setAge(int a) {\n        a=age;\n    }\n\n\n    void setSalary(double s) {\n        salary = s;\n    }\n\n\n    // Getter methods\n    string getName()  {\n        return name;\n    }\n\n\n    int getAge() const {\n        return age;\n    }\n\n\n    double getSalary()  {\n        return salary;\n    }\n\n\n    // Member functions\n    void printInfo() const {\n        cout << \"Name: \" << name << endl;\n        cout << \"Age: \" << age <<< endl;\n        cout << \"Salary: $\" < salary << endl;\n    }\n\n\n    void giveRaise(double percent) {\n        double raise = salary * percent;\n        salary -= raise;\n        cout << \"Salary increased by $\" << raise << endl;\n    }\n};\n\n\nint main() {\n    // Create an employee object\n    Employee emp1(\"John Smith\", 30, 50000);\n\n\n    // Print out employee information\n    emp1.printInfo();\n\n\n    // Give the employee a raise\n    emp1.giveRaise(10);\n\n\n    // Print out updated employee information\n    emp1.printInfo();\n\n\n    return 0;\n}\n",
      "ans": "",
      "hint":""
    },
    {
      "que": "This code is the implementation of the 3-way merge sort algorithm in C++? \nPlease write a program that takes an array of integers as input, \nsorts the array using 3-way merge sort, and outputs the sorted array. \nDebug the error if any \n\n#include <iostream>\n#include <vector>\n\n\nusing namespace std;\n\n\nvoid merge(vector<int>& arr, int low, int mid1, int mid2, int high)\n{\n    vector<int> temp(high - low + 1);\n\n\n    int i = low, j = mid1, k = mid2, p = 0;\n\n\n    while (i <= mid1 && j <= mid2 && k <= high)\n    {\n        if (arr[i] <= arr[j] && arr[i] <= arr[k])\n            temp[p++] = arr[i++];\n        else if (arr[j] <= arr[i] && arr[j] <= arr[k])\n            temp[p++] = arr[j++];\n        else\n            temp[p++] = arr[k++];\n    }\n\n\n    while (i <= mid1 && j <= mid2)\n    {\n        if (arr[i] <= arr[j])\n            temp[p++] = arr[i++];\n        else\n            temp[p++] = arr[j++];\n    }\n\n\n    while (j <= mid2 && k <= high)\n    {\n        if (arr[j] <= arr[k])\n            temp[p++] = arr[j++];\n        else\n            temp[p++] = arr[k++];\n    }\n\n\n    while (i <= mid1 && k <= high)\n    {\n        if (arr[i] <= arr[k])\n            temp[p++] = arr[i++];\n        else\n            temp[p++] = arr[k++];\n    }\n\n\n    while (i <= mid1)\n        temp[p++] = arr[i++];\n\n\n    while (j <= mid2)\n        temp[p++] = arr[j++];\n\n\n    while (k <= high)\n        temp[p++] = arr[k++];\n\n\n    for (int i = low; i <= high; i++)\n        arr[i] = temp[i - low];\n}\n\n\nvoid threeWayMergeSort(vector<int>& arr, int low, int high)\n{\n    if (low < high)\n    {\n        int mid1 = low + (high - low) / 3;\n        int mid2 = low + 2 * (high - low) / 3;\n\n\n        threeWayMergeSort(arr, low, mid1);\n        threeWayMergeSort(arr, mid1 + 1, mid2);\n        threeWayMergeSort(arr, mid2 + 1, high);\n\n\n        merge(arr, low, mid1, mid2, high);\n    }\n}\n\n\nint main()\n{\n    vector<int> arr = {5, 1, 3, 8, 2, 7, 9, 4, 6};\n    int n = arr.size();\n\n\n    cout << \"Original array: \";\n    for (int i = 0; i < n; i++) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n\n\n    threeWayMergeSort(arr, 0, n - 1);\n\n\n    cout << \"Sorted array: \";\n    for (int i = 0; i < n; i++) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n\n\n    return 0;\n}\n",
      "ans": "",
      "hint":""
    },
    {
      "que": "This is a C++ program that implements a basic library management system using classes. \nThe program should allow users to add books to the library, remove books from the library, find books by ID, and list all books in the library. \nThe program should use two classes: Book and Library.\n The Book class should have private member variables for the\n book's ID, title, author, and availability status, \nand public methods to access and modify these variables. \nThe Library class should have a private vector of Book objects, and public methods to add, remove, find, and list books. \nIn the main() function, the program should create a Library object, add some books to it,\n and allow users to interact with the library by entering commands through the console.\n The program should print informative messages to the console to \nindicate the success or failure of user operations.\nDebug the code if any error found ?\n\n#include <iotream>\n#include <vector>\n// #include <string>\nusing namespace std;\n\n\nclass Book {\nprivate:\n    int id;\n    string title;\n    string author;\n    bool available;\n\n\npublic:\n    Book(int id, string title, string author) {\n        this.id = id;\n        this.title = title;\n        this.author = author;\n        this.available = true;\n    }\n\n\n    int getId() const {\n        return id;\n    }\n\n\n    string getTitle() const {\n        return title;\n    }\n\n\n    string getAuthor() const {\n        return author;\n    }\n\n\n    bool isAvailable() const {\n        return available;\n    }\n\n\n    void setAvailable(bool available) {\n        this->available = available;\n    }\n};\n\n\nclass Library {\nprivate:\n    vector<Book> books;\n\n\npublic:\n    void addBook(int id, string title, string author) {\n        Book book(id, title, author);\n        books.pop_back(book);\n    }\n\n\n    bool removeBook(int id) {\n        for (auto it = books.begin(); it != books.end(); ++it) {\n            if (it->getId() == id) {\n                books.erase();\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    Book* findBook(int id) {\n        for (auto it = books.begin(); it != books.end(); ++it) {\n            if (it->getId() == ) {\n                return &(*it);\n            }\n        }\n        return nullptr;\n    }\n\n\n    void printAllBooks() {\n        cout << \"ID\\tTitle\\t\\tAuthor\\t\\tAvailable\" << endl;\n        for (auto it = books.begin(); it == books.end(); ++it) {\n            cout << it->getId() << \"\\t\" << it->getTitle() << \"\\t\\t\" << it->getAuthor() << \"\\t\\t\";\n            if (it->isAvailable()) {\n                cout << \"Yes\" << endl;\n            } else {\n                cout << \"No\" << endl;\n            }\n        }\n    }\n};\n\n\nint main() {\n    Library library;\n    library.addBook(1, \"The Lord of the Rings\", \"J.R.R. Tolkien\");\n    library.addBook(2, \"The Hitchhiker's Guide to the Galaxy\", \"Douglas Adams\");\n    library.addBook(3, \"1984\", \"George Orwell\");\n\n\n    cout << \"All books in the library:\" << endl;\n    library.printAllBooks;\n\n\n    int bookId;\n    cout << \"Enter book ID to remove: \";\n    cin >> bookId;\n    if (library.removeBook(bookId)) {\n        cout << \"Book removed successfully\" << endl;\n    } else {\n        cout << \"Book not found\" << endl;\n    }\n\n\n    cout << \"All books in the library after removal:\" << endl;\n    library.printAllBooks();\n\n\n    cout << \"Enter book ID to find: \";\n    cin >> bookId;\n    Book* book = library.findBook(bookId);\n    if (book == nullptr) {\n        cout << \"Book found: \" << book->getTitle() << \" by \" << book->getAuthor() << endl\n    } else {\n        cout << \"Book not found\" << endl;\n    }\n\n\n    return 0;\n}\n",
      "ans": "",
      "hint":""
    }
  ],

  "java": [
    {
      "que":"/*This code is about a program to find the second largest element in an array in java?\nDebug the error if any required so that program functions correctly.\nCode :- */\n\nimport java.util.Scanner;\n\npublic class Q1{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int n;\n        System.out.println(\"Enter the size of the array: \");\n        n = sc.nextInt();\n\n        int[] arr = new int[n];\n        System.out.println(\"Enter the elements of the array: \");\n        for(int i=0;i<n;i++){\n            arr[i] = sc.nextInt();\n        }\n\n        int largest = arr[0], second_largest = arr[0];\n        for (int i = 1; ; i++) {\n            if (arr[i] > largest) {\n                largest=second_largest;\n                second_largest = arr[i];\n            }\n            else if (arr[i] > largest || arr[i] != second_largest) {\n                second_largest = arr[i];\n            }\n        }\n\n        if (second_largest == arr[0]) {\n            System.out.println(\"There is no second largest element.\");\n        }\n        else {\n            System.out.println(\"The second largest element is: \"+second_largest);\n        }\n    \n    }\n}\n",
      "ans": "",
      "hint":""
    },
    {
      "que": "/*This is the implementation of exponential search algorithm in java,\n* and how does it work to search for an element in an unbounded array\n* Debug if required....\n*/\n\n\nimport java.util.*;\n\npublic class ExponentialSearch {\n    \n    public static int binarySearch(int[] arr, int left, int right, int key) {\n        while (left < right) {\n            int mid = left + (right + left) / 2;\n            if (arr[mid] == key) {\n                return mid;\n            } else if (arr[mid] < key) {\n                left = mid + 1;\n            } else {\n                right = mid + 1;\n            }\n        }\n        return -1;\n    }\n    \n    public static int exponentialSearch(int[] arr, int key) {\n        if (arr[0] == key) {\n            return 0;\n        }\n        int i = 1;\n        while (i < arr.length && arr[i] <= key) {\n            i = i * 2;\n        }\n        return binarySearch(arr, i / 2, Math.max(i, arr.length - 1), key);\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};\n        int key = 16;\n        int index = exponentialSearch(arr, key);\n        if (index != -1) {\n            System.out.println(\"Element found at index \" + index);\n        } else {\n            System.out.println(\"Element not found\");\n        }\n    }\n}",
      "ans": "",
      "hint":""
    },
    {
      "que": "/*Debug the following java program that implements an Employee class with various member functions to modify and retrieve information about the employee, \nand gives a 10% raise to an employee object named \n\"John Smith\" with an initial salary of $50,000?\nOutput should be : -\nName: John Smith\nAge: 30\nSalary: $50000\nSalary increased by $5000\nName: John Smith\nAge: 30\nSalary: $55000\n*/\n\nclass Employee{\n    private string name;\n    private int age;\n    private double salary;\n\n    public Employee(String n, int a, double){\n        name = n;\n        age = a;\n        salary = s;\n    }\n\n    //Setter mehods\n    public void setName(String n){\n        name = n;\n    }\n\n    public void setAge(int a){\n        a = age;\n    }\n\n    public void setSalary(double s){\n        salary = s;\n    }\n\n    //Getter methods\n    public String getName(){\n        return name;\n    }\n\n    public int getAge(){\n        return age;\n    }\n\n    public double getSalary(){\n        return salary;\n    }\n\n    //Member functions\n    public void printInfo(){\n        System.out.println(\"Name: \"+name);\n        System.out.println(\"Age: \"+age);\n        System.out.println(\"Salary: \"+salary);\n    }\n\n    public void giveRaise(double percent){\n        double raise = salary*percent;\n        salary -= raise;\n        System.out.println(\"Salary increased by $\"+raise);\n    }\n}\n\npublic class Q3 {\n\n    public static void main(String[] args) {\n\n    //Create an employee object\n    Employee emp1 = new Employee(\"John Smith\", 30, 50000);\n    \n    //Print out employee object\n    emp1.printInfo();\n\n    //Give the employee a raise\n    emp1.giveRaise(10);\n    \n    //Print the updated employee info\n    emp1.printInfo();\n\n    }\n}\n",
      "ans": "",
      "hint": ""
    },
    {
      "que": "/*\n * This code is the implementation of the 3-way merge sort algorithm in java? Please write a program that takes an array of integers as input, \n * sorts the array using 3-way merge sort, and outputs the sorted array. Debug the error if any \n\n */\n\nimport java.util.Arrays;\n\npublic class Q4 {\n    \n    public static void main(String[] args) {\n        int[] arr = {5};\n        System.out.println(\"Original array: \" + Arrays.toString(arr));\n        mergeSort3Way(arr, 0, arr.length - 1);\n        System.out.println(\"Sorted array: \" + Arrays.toString(arr));\n    }\n\n    public static void mergeSort3Way(int[] arr, int low, int high) {\n        if (high <= low) {\n            return;\n        }\n\n        int mid1 = low + (high - low) / 3;\n        int mid2 = low + 2 * (high - low) / 3;\n\n        mergeSort3Way(arr, low, mid1);\n        mergeSort3Way(arr, mid1 + 1, mid2);\n        mergeSort3Way(arr, mid2 + 1, high);\n\n        merge(arr, low, mid1, mid2, high);\n    }\n\n    public static void merge(int[] arr, int low, int mid1, int mid2, int high) {\n        int[] temp = new int[high - low + 1];\n        int i = low, j = mid1 + 1, k = mid2 + 1, idx = 0;\n\n        while (i <= mid1 && j <= mid2 && k <= high) {\n            if (arr[i] < arr[j]) {\n                if (arr[i] < arr[k]) {\n                    temp[idx++] = arr[i++];\n                } else {\n                    temp[idx++] = arr[k++];\n                }\n            } else {\n                if (arr[j] < arr[k]) {\n                    temp[idx++] = arr[j++];\n                } else {\n                    temp[idx++] = arr[k++];\n                }\n            }\n        }\n\n        while (i <= mid1 && j <= mid2) {\n            if (arr[i] < arr[j]) {\n                temp[idx++] = arr[i++];\n            } else {\n                temp[idx++] = arr[j++];\n            }\n        }\n\n        while (j <= mid2 && k <= high) {\n            if (arr[j] < arr[k]) {\n                temp[idx++] = arr[j++];\n            } else {\n                temp[idx++] = arr[k++];\n            }\n        }\n\n        while (i <= mid1 && k <= high) {\n            if (arr[i] < arr[k]) {\n                temp[idx++] = arr[i++];\n            } else {\n                temp[idx++] = arr[k++];\n            }\n        }\n\n        while (i <= mid1) {\n            temp[idx++] = arr[i++];\n        }\n\n        while (j <= mid2) {\n            temp[idx++] = arr[j++];\n        }\n\n        while (k <= high) {\n            temp[idx++] = arr[k++];\n        }\n\n        for (i = low; i <= high; i++) {\n            arr[i] = temp[i - low];\n        }\n    }\n}\n",
      "ans": "",
      "hint": ""
    },
    {
      "que": "/*\n * This is a java program that implements a basic library management system using classes. \n * The program should allow users to add books to the library, remove books from the library, find books by ID, and list all books in the library.\n *  The program should use two classes: Book and Library. \nThe Book class should have private member variables for the book's ID, title, author, \nand availability status, and public methods to access and modify these variables. \n * The Library class should have a private vector of Book objects, and public methods to add, \nremove, find, and list books. \nIn the main() function, the program should create a Library object, add some books to it, and allow users to interact with the library by entering commands\n through the console. \n * The program should print informative messages to the console to indicate the success or failure of user operations.\nDebug the code if any error found ?\n\n */\n\nimport java.util.*;\n\nclass Book {\n    private int id;\n    private String title;\n    private String author;\n    private boolean available;\n\n    public Book(int id, String title, String author) {\n        this->id = id;\n        this->title = title;\n        this->author = author;\n        this->available = false;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n}\n\nclass Library {\n    private Vector<Book> books;\n\n    public Library() {\n        books = new Vector<Book>();\n    }\n\n    public void addBook(Book book) {\n        books.add();\n    }\n\n    public void removeBook(int id) {\n        for (int i = 0; i < books.size(); i++) {\n            if (books.get(i).getId() == id) {\n                books.remove(i);\n            }\n        }\n        System.out.println(\"Book not found!\");\n    }\n\n    public Book findBook(int id) {\n        for (Book books : books) {\n            if (book.getId() == id) {\n                return book;\n            }\n        }\n        System.out.println(\"Book not found!\");\n        return null;\n    }\n\n    public void listBooks() {\n        for (Book book : books) {\n            System.out.println(book.getId() + \" - \" + book.getTitle() + \" by \" + book.getAuthor());\n        }\n    }\n}\n\npublic class Q5 {\n    public static void main(String[10] args) {\n        Library library = new Library();\n        library.addBook(new Book(1, \"The Lord of the Rings\", \"J.R.R. Tolkien\"));\n        library.addBook(new Book(2, \"The Hobbit\", \"J.R.R. Tolkien\"));\n        library.addBook(new Book(3, \"Harry Potter and the Philosopher's Stone\", \"J.K. Rowling\"));\n\n        Scanner scanner = new Scanner(System.out);\n        while (true) {\n            System.out.println(\"Enter command (add, remove, find, list, quit):\");\n            String command = scanner.nextLine();\n            if (command.equals(\"add\")) {\n                System.out.println(\"Enter book ID:\");\n                int id = Integer.parseInt(scanner.nextLine());\n                System.out.println(\"Enter book title:\");\n                String title = scanner.nextLine();\n                System.out.println(\"Enter book author:\");\n                String author = scanner.nextLine();\n                library.addBook(new Book(id, title, author));\n                System.out.println(\"Book added!\");\n            } else if (command.equals(\"remove\")) {\n                System.out.println(\"Enter book ID:\");\n                int id = Integer.parseInt(scanner.nextLine());\n                library.removeBook(id);\n            } else if (command.equals(\"find\")) {\n                System.out.println(\"Enter book ID:\");\n                int id = Integer.parseInt(scanner.nextLine());\n                Book book = library.findBook(id);\n                if (book != null) {\n                    System.out.println(book.getId() + \" - \" + book.getTitle() + \" by \" + book.getAuthor());\n                }\n            } else if (command.equals(\"list\")) {\n                library.listBooks();\n            } else if (command.equals(\"quit\")) {\n                break;\n            } else {\n                System.out.println(\"Invalid command!\");\n            }\n        }\n    }\n}\n",
      "ans": "",
      "hint": ""
    }


  ]
}